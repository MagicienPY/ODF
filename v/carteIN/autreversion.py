import streamlit as st
import pandas as pd
import pydeck as pdk
import matplotlib.pyplot as plt
from datetime import datetime
import os
import json

# Configuration de l'application
st.set_page_config(layout="wide", page_title="Syst√®me de Publications", page_icon="üåç")

# Activer le mode sombre
st.markdown("""
    <style>
        body {
            background-color: #000;
            color: white;
        }
        .stButton>button {
            background-color: #FF4B4B;
            color: white;
        }
    </style>
""", unsafe_allow_html=True)

# Initialize session state pour les coordonn√©es
if 'clicked_lat_lon' not in st.session_state:
    st.session_state.clicked_lat_lon = None

# Fonction pour sauvegarder les donn√©es
def save_to_json(data, filename="data_publications.json"):
    if os.path.exists(filename):
        with open(filename, 'r', encoding='utf-8') as f:
            try:
                existing_data = json.load(f)
            except json.JSONDecodeError:
                existing_data = []
    else:
        existing_data = []
    existing_data.append(data)
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(existing_data, f, ensure_ascii=False, indent=2)

# [Autres fonctions existantes restent identiques]
# Fonction pour sauvegarder les donn√©es
def save_to_json(data, filename="data_publications.json"):
    if os.path.exists(filename):
        with open(filename, 'r', encoding='utf-8') as f:
            try:
                existing_data = json.load(f)
            except json.JSONDecodeError:
                existing_data = []
    else:
        existing_data = []
    existing_data.append(data)
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(existing_data, f, ensure_ascii=False, indent=2)

# Charger les donn√©es JSON
def load_data(filename="data_publications.json"):
    if os.path.exists(filename):
        with open(filename, 'r', encoding='utf-8') as f:
            try:
                data = json.load(f)
                return data
            except json.JSONDecodeError:
                return []
    return []

# Classification simple
def classify_text(text):
    text = text.lower()
    if any(word in text for word in ['politique', 'gouvernement', 'ministre', 'pr√©sident']):
        return "Politique"
    elif any(word in text for word in ['social', 'sant√©', 'education', '√©cole']):
        return "Social"
    elif any(word in text for word in ['√©conomie', 'finance', 'entreprise', 'commerce']):
        return "√âconomique"
    elif any(word in text for word in [
    'militaire', 'arm√©e', 's√©curit√©', 'd√©fense', 'op√©ration', 'neutraliser', 'munitions', 'BIR', 
    'terroristes', 'attaque', 'assaut', 'embuscade', 'riposte', 'patrouille', 'combat', 'fusillade', 
    'neutralisation', 'bless√©s', 'assailants', 'explosion', 'charge explosive', 'moto', 'engagement', 
    'intervention', 'arm√©s', 'forces de l\'ordre', 'incursion', 'fuite', 'attaque √† main arm√©e', 
    'r√©cup√©rer', 'mat√©riel', 'armes', 'FAL', 'AK47', 'munition', 'roquettes', 'grenades', 'chargeurs', 
    'cibles', 'coup de feu', 'camp', 'raid', 'plan d\'attaque', 'combat intense', 'g√©n√©ral', 'terroristes', 
    'bandits', 'terroriste', 'blessure', 'arm√©e alli√©e', 'forces de l\'ordre', 'opfor', 'bataillon', 
    'prisonniers', 'camp militaire', 'bilan', 'restes de guerre', 'tactiques', 'infiltration', 'postes militaires',
    'embuscade', 'assaut sur base', 'missions', 'guerre', 'conflit', 'r√©action militaire', 'arm√©e nig√©riane', 
    'r√©sistance', 'engins explosifs', 'victoire', 'd√©fense frontali√®re', 'combattants', 'r√©fugi√©s', 'territoire contr√¥l√©',
    'insurrection', 'attaque repouss√©e', 'attaque ennemie', 'lutte contre le terrorisme', 's√©curisation', 'raid de reconnaissance'
]):

        return "Militaire"
    return "Autre"

# Charger les donn√©es GeoJSON des fronti√®res r√©gionales
def load_geojson(filename="cm.json"):
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        st.error(f"Le fichier {filename} est introuvable. Veuillez le t√©l√©charger et l'ajouter au r√©pertoire.")
        return None

def main():
    st.title("üåç ODF-SIG - DES INCIDENTS PAR DEPARTEMENTS")
    
    # Cr√©ation d'une colonne principale pour la carte et d'une sidebar
    main_col, sidebar = st.columns([3, 1])
    
    with sidebar:
        st.header("üìã Nouvelle Publication")
        title = st.text_input("Titre")
        content = st.text_area("Contenu")
        
        # Cr√©ation des champs pour les coordonn√©es
        st.write("Coordonn√©es:")
        col1, col2 = st.columns(2)
        with col1:
            lat = st.number_input("Latitude", value=7.0, format="%.6f", key="lat_input")
        with col2:
            lon = st.number_input("Longitude", value=11.0, format="%.6f", key="lon_input")
        
        st.info("Double-cliquez sur la carte pour copier les coordonn√©es")
        
        if st.button("Publier"):
            if title and content:
                category = classify_text(content)
                new_entry = {
                    "title": title,
                    "contenus": content,
                    "category": category,
                    "lat": lat,
                    "lon": lon,
                    "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                }
                save_to_json(new_entry)
                st.success("Publication ajout√©e avec succ√®s!")
                st.experimental_rerun()
    
    with main_col:
        data = load_data()
        if data:
            df = pd.DataFrame(data)
            
            st.header("üìç Carte des Publications")
            color_map = {
                "Politique": [255, 99, 71, 160],
                "Social": [144, 238, 144, 160],
                "√âconomique": [30, 144, 255, 160],
                "Militaire": [255, 215, 0, 160],
                "Autre": [128, 128, 128, 160]
            }
            df['color'] = df['category'].map(color_map)
            
            regions_geojson = load_geojson()
            
            if regions_geojson:
                # Cr√©ation des layers
                layers = [
                    # Layer des r√©gions
                    pdk.Layer(
                        "GeoJsonLayer",
                        data=regions_geojson,
                        get_fill_color=[100, 150, 200, 100],
                        get_line_color=[255, 255, 255],
                        line_width_min_pixels=2,
                        pickable=True,
                        auto_highlight=True
                    ),
                    # Layer des points
                    pdk.Layer(
                        "ScatterplotLayer",
                        data=df,
                        get_position=['lon', 'lat'],
                        get_color='color',
                        get_radius=5000,
                        pickable=True
                    )
                ]
                
                view_state = pdk.ViewState(
                    latitude=7.0,
                    longitude=11.0,
                    zoom=6,
                    pitch=50
                )
                
                # Tooltip am√©lior√©
                tooltip = {
                    "html": """
                        <style>
                            .tooltip {
                                background-color: steelblue;
                                color: white;
                                padding: 10px;
                                border-radius: 5px;
                                font-family: Arial, sans-serif;
                            }
                        </style>
                        <div class="tooltip">
                            <div><b>R√©gion:</b> {name}</div>
                            <div><b>Titre:</b> {title}</div>
                            <div><b>Contenu:</b> {contenus}</div>
                            <div><b>Cat√©gorie:</b> {category}</div>
                            <div><b>Coordonn√©es:</b> ({lat}, {lon})</div>
                        </div>
                    """,
                    "style": {
                        "backgroundColor": "steelblue",
                        "color": "white"
                    }
                }
                
                # Cr√©ation et affichage de la carte
                st.pydeck_chart(pdk.Deck(
                    map_style="mapbox://styles/mapbox/dark-v10",
                    initial_view_state=view_state,
                    layers=layers,
                    tooltip=tooltip
                ))
                
                # Ajout d'un message d'aide pour les coordonn√©es
                st.info("""
                Pour copier les coordonn√©es d'un point sur la carte :
                1. Faites un clic droit sur l'emplacement souhait√©
                2. S√©lectionnez 'What\'s here?' ou 'Qu'y a-t-il ici ?'
                3. Les coordonn√©es appara√Ætront et pourront √™tre copi√©es
                """)
            
            # Affichage des statistiques
            st.header("üìä Statistiques")
            col1, col2 = st.columns(2)
            with col1:
                st.subheader("R√©partition par cat√©gorie")
                category_counts = df['category'].value_counts()
                pie_colors = ["#FF6347", "#90EE90", "#1E90FF", "#FFD700", "#808080"]
                fig, ax = plt.subplots()
                ax.pie(category_counts, labels=category_counts.index, autopct='%1.1f%%', startangle=140, colors=pie_colors)
                ax.axis('equal')
                st.pyplot(fig)
            
            with col2:
                st.subheader("Liste des Publications")
                st.dataframe(df[['title', 'category', 'contenus', 'date']], hide_index=True)

if __name__ == "__main__":
    main()